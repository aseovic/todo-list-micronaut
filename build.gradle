/*
 * Copyright (c) 2021 Oracle and/or its affiliates.
 * Licensed under the Universal Permissive License v 1.0 as shown at
 * https://oss.oracle.com/licenses/upl.
 */

plugins {
  id "application"
  id "java"
  id "com.github.johnrengelman.shadow" version "4.0.2"
  id "com.google.cloud.tools.jib"      version "3.1.4"
}

repositories {
  mavenLocal()
  maven {
    url = 'https://repo.maven.apache.org/maven2'
    url = "https://plugins.gradle.org/m2/"
  }
}

dependencies {
  annotationProcessor platform("io.micronaut:micronaut-bom:${micronautVersion}")
  annotationProcessor "io.micronaut:micronaut-inject-java"
  annotationProcessor "io.micronaut:micronaut-validation"
  annotationProcessor "io.micronaut.coherence:micronaut-coherence-data:${micronautCohVersion}"

  implementation platform("io.micronaut:micronaut-bom:${micronautVersion}")
  implementation "io.micronaut:micronaut-inject"
  implementation "io.swagger.core.v3:swagger-annotations"
  implementation "io.micronaut:micronaut-validation"
  implementation "io.micronaut:micronaut-runtime"
  implementation "io.micronaut:micronaut-http-server-netty"
  implementation "com.oracle.coherence.ce:coherence:${projectVersion}"
  implementation "io.micronaut.coherence:micronaut-coherence:${micronautCohVersion}"
  implementation "io.micronaut.coherence:micronaut-coherence-data:${micronautCohVersion}"
  implementation "io.reactivex.rxjava2:rxjava:${rxJava2Version}"
  implementation "io.micronaut.graphql:micronaut-graphql:${micronautGQLVersion}"

  runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
}

group = "com.oracle.coherence.examples"
version = "${projectVersion}"

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

ext {
  javaMainClass = "com.oracle.coherence.examples.todo.server.Application"
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

jib {
  containerizingMode = "packaged"
  from {
    image = "gcr.io/distroless/java11-debian11"
  }
  to {
    image = "ghcr.io/coherence-community/${rootProject.name}"
    tags = ["${version}"]
  }
  container {
    ports = ["5001", "5002"]
  }
}

application {
  mainClassName = javaMainClass
}

jar {
  manifest {
    attributes(
            "Main-Class": javaMainClass
    )
  }
}

shadowJar {
  mergeServiceFiles()
}
